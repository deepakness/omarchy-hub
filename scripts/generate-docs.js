#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * Generate SETUPS.md and THEMES.md from JSON data
 * This script reads the setups.json and themes.json files and creates comprehensive markdown documentation
 */

function generateSetupsMarkdown() {
  try {
    // Read setups.json
    const setupsPath = path.join(__dirname, '..', 'data', 'setups.json');
    const setupsData = JSON.parse(fs.readFileSync(setupsPath, 'utf8'));
    
    // Count setups by category for stats
    const categoryStats = {
      'Desktop': 0,
      'Laptop': 0,
      'Tablet': 0
    };
    
    setupsData.forEach(setup => {
      if (categoryStats[setup.category] !== undefined) {
        categoryStats[setup.category]++;
      }
    });

    // Start building markdown content
    let markdown = `# Cool Omarchy workstation setups

Welcome to the Omarchy community showcase! This page features amazing workstation setups from users around the world who have embraced the Omarchy Linux distribution.

üíª **Prefer a visual experience?** Check out these setups [as beautiful cards on the website](https://omarchy.deepakness.com/setups).

## Statistics

- **Total setups:** ${setupsData.length}
- **Desktop setups:** ${categoryStats.Desktop}
- **Laptop setups:** ${categoryStats.Laptop}
- **Tablet setups:** ${categoryStats.Tablet}

## About these setups

These setups represent real-world installations of Omarchy Linux, showcasing:

- **Hardware diversity**: From Framework laptops to vintage MacBooks, custom PCs to mini computers
- **Use cases**: Development workstations, gaming rigs, content creation setups, and more
- **Community spirit**: Real users sharing their Omarchy experiences and configurations

---

## Setup gallery

`;

    // Generate content for all setups in order
    setupsData.forEach((setup, index) => {
      markdown += `### ${setup.id}. ${setup.name}\n\n`;
      
      // Add description
      markdown += `${setup.description}\n\n`;
      
      // Add device information
      markdown += `**Device:** ${setup.device}\n\n`;
      
      // Add screenshot if available - fix image path and size
      if (setup.screenshot) {
        // Use HTML img tag with width control for smaller images
        markdown += `<img src="/public/${setup.screenshot}" alt="${setup.name}" width="450">\n\n`;
      }
      
      // Add tags
      if (setup.tags && setup.tags.length > 0) {
        markdown += `**Tags:** ${setup.tags.map(tag => `\`${tag}\``).join(', ')}\n\n`;
      }
      
      // Add link if available
      if (setup.link) {
        markdown += `**Source:** [View original post](${setup.link})\n\n`;
      }
      
      // Add separator between setups (except for the last one)
      if (index < setupsData.length - 1) {
        markdown += '---\n\n';
      }
    });

    markdown += `
---

*Last updated: ${new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}*

*Automatically generated by: \`scripts/generate-docs.js\`*
`;

    // Write to SETUPS.md
    const outputPath = path.join(__dirname, '..', 'SETUPS.md');
    fs.writeFileSync(outputPath, markdown, 'utf8');
    
    console.log(`‚úÖ Successfully generated SETUPS.md with ${setupsData.length} setups`);
    console.log(`üìÅ Output: ${outputPath}`);
    
  } catch (error) {
    console.error('‚ùå Error generating SETUPS.md:', error.message);
    throw error;
  }
}

function generateThemesMarkdown() {
  try {
    // Read themes.json
    const themesPath = path.join(__dirname, '..', 'data', 'themes.json');
    const themesData = JSON.parse(fs.readFileSync(themesPath, 'utf8'));
    
    // Count themes by category for stats
    const categoryStats = {};
    themesData.forEach(theme => {
      categoryStats[theme.category] = (categoryStats[theme.category] || 0) + 1;
    });

    // Count official vs unofficial themes
    const officialCount = themesData.filter(theme => theme.tags && theme.tags.includes('official')).length;
    const unofficialCount = themesData.length - officialCount;

    // Start building markdown content
    let markdown = `# Omarchy themes collection

Welcome to the comprehensive collection of Omarchy themes! This page showcases all available themes for the Omarchy Linux distribution, from official themes to community contributions.

üé® **Prefer a visual experience?** Check out these themes [as beautiful cards on the website](https://omarchy.deepakness.com/themes).

## Statistics

- **Total themes:** ${themesData.length}
- **Official themes:** ${officialCount}
- **Community themes:** ${unofficialCount}
- **Dark themes:** ${categoryStats['Dark Theme'] || 0}
- **Light themes:** ${categoryStats['Light Theme'] || 0}

## About these themes

These themes represent the diverse visual styles available for Omarchy Linux, including:

- **Official themes**: Curated themes maintained by the Omarchy team
- **Community themes**: Creative contributions from the Omarchy community
- **Visual variety**: From dark and light themes to colorful and retro styles
- **Easy installation**: All themes can be easily installed and switched

---

## Theme gallery

`;

    // Generate content for all themes in order
    themesData.forEach((theme, index) => {
      markdown += `### ${theme.id}. ${theme.name}\n\n`;
      
      // Add category
      markdown += `**Category:** ${theme.category}\n\n`;
      
      // Add author
      markdown += `**Author:** ${theme.author}\n\n`;
      
      // Add screenshot if available
      if (theme.screenshot) {
        markdown += `<img src="${theme.screenshot}" alt="${theme.name}" width="450">\n\n`;
      }
      
      // Add tags
      if (theme.tags && theme.tags.length > 0) {
        markdown += `**Tags:** ${theme.tags.map(tag => `\`${tag}\``).join(', ')}\n\n`;
      }
      
      // Add link if available
      if (theme.link) {
        markdown += `**Install:** [View theme repository](${theme.link})\n\n`;
      }
      
      // Add separator between themes (except for the last one)
      if (index < themesData.length - 1) {
        markdown += '---\n\n';
      }
    });

    markdown += `
---

*Last updated: ${new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}*

*Automatically generated by: \`scripts/generate-docs.js\`*
`;

    // Write to THEMES.md
    const outputPath = path.join(__dirname, '..', 'THEMES.md');
    fs.writeFileSync(outputPath, markdown, 'utf8');
    
    console.log(`‚úÖ Successfully generated THEMES.md with ${themesData.length} themes`);
    console.log(`üìÅ Output: ${outputPath}`);
    
  } catch (error) {
    console.error('‚ùå Error generating THEMES.md:', error.message);
    throw error;
  }
}

function updateReadmeStats() {
  try {
    // Read all JSON data files
    const setupsPath = path.join(__dirname, '..', 'data', 'setups.json');
    const themesPath = path.join(__dirname, '..', 'data', 'themes.json');
    const resourcesPath = path.join(__dirname, '..', 'data', 'resources.json');
    
    const setupsData = JSON.parse(fs.readFileSync(setupsPath, 'utf8'));
    const themesData = JSON.parse(fs.readFileSync(themesPath, 'utf8'));
    const resourcesData = JSON.parse(fs.readFileSync(resourcesPath, 'utf8'));
    
    // Read current README.md
    const readmePath = path.join(__dirname, '..', 'README.md');
    let readmeContent = fs.readFileSync(readmePath, 'utf8');
    
    // Create the stats line
    const statsLine = `Currently, omarchy-hub showcases **${setupsData.length} workstation setups**, **${themesData.length} beautiful themes**, **${resourcesData.length} useful resources** and more from the community.`;
    
    // Replace content between the stats comments
    const statsRegex = /<!--STATS:START-->[\s\S]*?<!--STATS:END-->/;
    const replacement = `<!--STATS:START-->\n${statsLine}\n<!--STATS:END-->`;
    
    if (statsRegex.test(readmeContent)) {
      readmeContent = readmeContent.replace(statsRegex, replacement);
    } else {
      // If the comments don't exist, add them after the description
      const descriptionMatch = readmeContent.match(/A community-driven website for collecting and sharing themes, setups, resources, and links for \[Omarchy\]\(https:\/\/omarchy\.org\) - the opinionated Arch \+ Hyprland setup by DHH\.\n\n/);
      if (descriptionMatch) {
        const insertPos = descriptionMatch.index + descriptionMatch[0].length;
        readmeContent = readmeContent.slice(0, insertPos) + 
                       `<!--STATS:START-->\n${statsLine}\n<!--STATS:END-->\n\n` + 
                       readmeContent.slice(insertPos);
      }
    }
    
    // Write updated README.md
    fs.writeFileSync(readmePath, readmeContent, 'utf8');
    
    console.log(`‚úÖ Successfully updated README.md with current statistics`);
    console.log(`üìä Stats: ${setupsData.length} setups, ${themesData.length} themes, ${resourcesData.length} resources`);
    
  } catch (error) {
    console.error('‚ùå Error updating README.md stats:', error.message);
    throw error;
  }
}

function generateAllDocs() {
  console.log('üöÄ Starting documentation generation...\n');
  
  try {
    generateSetupsMarkdown();
    console.log('');
    generateThemesMarkdown();
    console.log('');
    updateReadmeStats();
    console.log('\nüéâ All documentation generated successfully!');
  } catch (error) {
    console.error('‚ùå Error generating documentation:', error.message);
    process.exit(1);
  }
}

// Run the script if called directly
if (require.main === module) {
  generateAllDocs();
}

module.exports = { generateSetupsMarkdown, generateThemesMarkdown, updateReadmeStats, generateAllDocs };
