#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * Generate SETUPS.md from setups.json data
 * This script reads the setups.json file and creates a comprehensive markdown documentation
 */

function generateSetupsMarkdown() {
  try {
    // Read setups.json
    const setupsPath = path.join(__dirname, '..', 'data', 'setups.json');
    const setupsData = JSON.parse(fs.readFileSync(setupsPath, 'utf8'));
    
    // Count setups by category for stats
    const categoryStats = {
      'Desktop': 0,
      'Laptop': 0,
      'Tablet': 0
    };
    
    setupsData.forEach(setup => {
      if (categoryStats[setup.category] !== undefined) {
        categoryStats[setup.category]++;
      }
    });

    // Start building markdown content
    let markdown = `# Cool Omarchy workstation setups

Welcome to the Omarchy community showcase! This page features amazing workstation setups from users around the world who have embraced the Omarchy Linux distribution.

💻 **Prefer a visual experience?** Check out these setups as beautiful cards on the [website](https://omarchy.deepakness.com/setups).

## Statistics

- **Total setups:** ${setupsData.length}
- **Desktop setups:** ${categoryStats.Desktop}
- **Laptop setups:** ${categoryStats.Laptop}
- **Tablet setups:** ${categoryStats.Tablet}

## About these setups

These setups represent real-world installations of Omarchy Linux, showcasing:

- **Hardware diversity**: From Framework laptops to vintage MacBooks, custom PCs to mini computers
- **Use cases**: Development workstations, gaming rigs, content creation setups, and more
- **Community spirit**: Real users sharing their Omarchy experiences and configurations

---

## Setup gallery

`;

    // Generate content for all setups in order
    setupsData.forEach((setup, index) => {
      markdown += `### ${setup.name}\n\n`;
      
      // Add description
      markdown += `${setup.description}\n\n`;
      
      // Add device information
      markdown += `**Device:** ${setup.device}\n\n`;
      
      // Add screenshot if available - fix image path and size
      if (setup.screenshot) {
        // Use HTML img tag with width control for smaller images
        markdown += `<img src="/public/${setup.screenshot}" alt="${setup.name}" width="450">\n\n`;
      }
      
      // Add tags
      if (setup.tags && setup.tags.length > 0) {
        markdown += `**Tags:** ${setup.tags.map(tag => `\`${tag}\``).join(', ')}\n\n`;
      }
      
      // Add link if available
      if (setup.link) {
        markdown += `**Source:** [View original post](${setup.link})\n\n`;
      }
      
      // Add separator between setups (except for the last one)
      if (index < setupsData.length - 1) {
        markdown += '---\n\n';
      }
    });

    markdown += `
---

*Last updated: ${new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}*

*Automatically generated by: \`scripts/generate-setups.js\`*
`;

    // Write to SETUPS.md
    const outputPath = path.join(__dirname, '..', 'SETUPS.md');
    fs.writeFileSync(outputPath, markdown, 'utf8');
    
    console.log(`✅ Successfully generated SETUPS.md with ${setupsData.length} setups`);
    console.log(`📁 Output: ${outputPath}`);
    
  } catch (error) {
    console.error('❌ Error generating SETUPS.md:', error.message);
    process.exit(1);
  }
}

// Run the script if called directly
if (require.main === module) {
  generateSetupsMarkdown();
}

module.exports = { generateSetupsMarkdown };
